"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const playwright_1 = require("playwright");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
(async () => {
    // Define o caminho do arquivo que armazenar√° o contador
    const counterFilePath = path.join(__dirname, '../contadores', 'space-counter.txt');
    const targetEnvPath = path.join(__dirname, '../config/target-env.json'); // Added
    // L√™ o contador atual do arquivo ou usa 1 se n√£o existir
    let counter = 1;
    try {
        if (fs.existsSync(counterFilePath)) {
            counter = parseInt(fs.readFileSync(counterFilePath, 'utf8'), 10) + 1;
        }
    }
    catch (e) {
        console.log('Iniciando contador em 1');
    }
    // Salva o novo valor do contador no arquivo
    fs.writeFileSync(counterFilePath, counter.toString());
    // Obt√©m a data/hora atual formatada
    const now = new Date();
    const dateStr = now.toLocaleDateString('pt-BR').replace(/\//g, '-');
    const timeStr = now.toLocaleTimeString('pt-BR').replace(/:/g, '-');
    // Nome √∫nico do espa√ßo
    const spaceName = `Espa√ßo Autom√°tico ${counter} (${dateStr} ${timeStr})`;
    console.log(`üî¢ Criando espa√ßo #${counter}`);
    let targetUrl; // Added
    try { // Added
        if (!fs.existsSync(targetEnvPath)) { // Added
            console.error(`Error: ${targetEnvPath} not found. Please configure target environment via UI first.`); // Added
            process.exit(1); // Added
        } // Added
        const rawTargetData = fs.readFileSync(targetEnvPath, 'utf-8'); // Added
        if (!rawTargetData.trim()) { // Added
            console.error(`Error: ${targetEnvPath} is empty. Please ensure target environment is configured.`); // Added
            process.exit(1); // Added
        } // Added
        const targetData = JSON.parse(rawTargetData); // Added
        if (!targetData.targetUrl) { // Added
            console.error(`Error: targetUrl not found in ${targetEnvPath}.`); // Added
            process.exit(1); // Added
        } // Added
        targetUrl = targetData.targetUrl; // Added
        console.log(`üéØ Using target URL: ${targetUrl}`); // Added
    }
    catch (error) { // Added
        console.error(`Error reading or parsing ${targetEnvPath}:`, error); // Added
        process.exit(1); // Added
    } // Added
    // Configura√ß√£o para tela cheia - ajustada para funcionar melhor no macOS
    const browser = await playwright_1.chromium.launch({
        headless: false,
        slowMo: 300,
        args: [
            '--start-maximized',
            `--window-size=2560,1600` // Tamanho grande fixo (ajuste conforme seu monitor)
        ]
    });
    // Criando contexto do navegador com tamanho m√°ximo de janela
    const context = await browser.newContext({
        storageState: path.join(__dirname, '../config/auth.json'), // Corrected path
        viewport: null // Isso desativa o viewport fixo, permitindo tela cheia
    });
    const page = await context.newPage();
    try {
        // Maximizar janela para macOS usando teclas de atalho
        try {
            // Tenta simular Cmd+Ctrl+F para macOS (tela cheia)
            await page.keyboard.press('Meta+Control+f');
            console.log('‚úÖ Enviou comando de teclado para maximizar janela (macOS)');
        }
        catch (e) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel maximizar via teclado, usando tamanho predefinido');
        }
        // 1. Acessa o painel inicial
        await page.goto(targetUrl); // Use the dynamic target URL
        console.log('‚úÖ P√°gina inicial acessada');
        // 2. Clica no bot√£o do navbar "Espa√ßos"
        await page.waitForSelector('text=Espa√ßos', { state: 'visible' });
        await page.click('text=Espa√ßos');
        console.log('‚úÖ Clicou em Espa√ßos');
        // 3. Aguarda a URL mudar para /espacos/#list
        await page.waitForURL('**/espacos/#list', { timeout: 10000 });
        console.log('‚úÖ URL mudou para espa√ßos/#list');
        // 4. Aguarda o bot√£o "Criar Espa√ßo" aparecer e clica
        await page.waitForSelector('button:has-text("Criar Espa√ßo")', { state: 'visible', timeout: 10000 });
        await page.click('button:has-text("Criar Espa√ßo")');
        console.log('‚úÖ Clicou em Criar Espa√ßo');
        // 5. Aguarda o modal de cria√ß√£o aparecer
        await page.waitForSelector('.modal__content, div[data-v-2836fdb5-s].modal__content', { state: 'visible', timeout: 10000 });
        console.log('‚úÖ Modal de cria√ß√£o apareceu');
        // Pequena pausa para garantir que o modal esteja totalmente carregado
        await page.waitForTimeout(2000);
        // 6. Preenche o campo "Nome" com nome √∫nico
        await page.fill('input[name="name"], input[placeholder="Nome"]', spaceName);
        console.log(`‚úÖ Preencheu o nome: ${spaceName}`);
        // 7. Seleciona o Tipo de Espa√ßo a partir do dropdown
        try {
            // Seleciona o dropdown de tipo de espa√ßo
            await page.waitForSelector('select[name="type"]', { state: 'visible', timeout: 5000 });
            // Seleciona "Biblioteca P√∫blica" como tipo de espa√ßo (value="20")
            await page.selectOption('select[name="type"]', '20');
            console.log('‚úÖ Selecionou tipo de espa√ßo "Biblioteca P√∫blica"');
            // Op√ß√£o alternativa: se quiser selecionar pelo texto
            // await page.selectOption('select[name="type"]', { label: 'Biblioteca P√∫blica' });
        }
        catch (error) {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel selecionar tipo de espa√ßo do dropdown, tentando abordagem alternativa...', error);
            // Abordagem alternativa usando JavaScript
            try {
                await page.evaluate(() => {
                    const select = document.querySelector('select[name="type"]');
                    if (select) {
                        // Procura pela op√ß√£o "Biblioteca P√∫blica" ou pela primeira op√ß√£o com "Biblioteca"
                        const options = Array.from(select.options);
                        const bibliotecaOption = options.find(opt => opt.text === 'Biblioteca P√∫blica' ||
                            opt.text.includes('Biblioteca'));
                        if (bibliotecaOption) {
                            select.value = bibliotecaOption.value;
                            // Dispara evento de mudan√ßa para atualizar binding
                            select.dispatchEvent(new Event('change', { bubbles: true }));
                            return true;
                        }
                    }
                    return false;
                });
                console.log('‚úÖ Selecionou tipo de espa√ßo usando JavaScript');
            }
            catch (jsError) {
                console.warn('‚ö†Ô∏è Falha tamb√©m na abordagem JavaScript:', jsError);
            }
        }
        // 8. Adiciona √Årea de Atua√ß√£o
        await page.click('button:has-text("Adicionar nova")');
        console.log('‚úÖ Clicou em Adicionar nova √°rea de atua√ß√£o');
        // Aguarda o dropdown/modal de op√ß√µes aparecer
        await page.waitForTimeout(1000);
        // Seleciona a linguagem cultural "Artes Circenses"
        try {
            // Aguarda as op√ß√µes aparecerem
            await page.waitForSelector('label:has-text("Artes Circenses")', { timeout: 5000 });
            // Clica na op√ß√£o "Artes Circenses"
            await page.click('label:has-text("Artes Circenses")');
            console.log('‚úÖ Selecionou linguagem "Artes Circenses"');
            // Fecha o popup/seletor (tenta v√°rias abordagens)
            try {
                // Primeiro tenta clicar em um bot√£o de confirma√ß√£o se existir
                await page.click('button:has-text("Confirmar"), button:has-text("Aplicar"), button:has-text("OK")', { timeout: 3000 });
                console.log('‚úÖ Clicou no bot√£o de confirma√ß√£o');
            }
            catch (error) {
                console.log('‚ö†Ô∏è N√£o encontrou bot√£o de confirma√ß√£o, tentando fechar de outra forma');
                // Se n√£o encontrar bot√£o espec√≠fico, tenta clicar fora do popup para fech√°-lo
                await page.mouse.click(10, 10);
                console.log('‚úÖ Clicou fora para fechar o popup');
                // Se ainda estiver aberto, pressiona ESC
                try {
                    const isPopupVisible = await page.isVisible('.v-popper__popper--shown, .multiselect__content-wrapper');
                    if (isPopupVisible) {
                        await page.keyboard.press('Escape');
                        console.log('‚úÖ Pressionou ESC para fechar popup');
                    }
                }
                catch (e) {
                    // Ignora erro na verifica√ß√£o
                }
            }
        }
        catch (error) {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel selecionar linguagem cultural, continuando...', error);
        }
        // 9. Preenche o campo "Descri√ß√£o curta"
        await page.fill('textarea[name="shortDescription"]', `Esse espa√ßo foi criado automaticamente (ID: ${counter})`);
        console.log('‚úÖ Preencheu a descri√ß√£o curta');
        // 10. Clica no bot√£o "Criar e Publicar"
        await page.click('button:has-text("Criar e Publicar")');
        console.log('‚úÖ Clicou em Criar e Publicar');
        // 11. Aguarda a confirma√ß√£o de sucesso (modal "Espa√ßo Criado!")
        await page.waitForSelector('text="Espa√ßo Criado!"', { state: 'visible', timeout: 10000 });
        console.log('‚úÖ Modal de confirma√ß√£o "Espa√ßo Criado!" apareceu');
        // Pequena pausa para garantir que o modal carregue completamente
        await page.waitForTimeout(1000);
        // 12. Clica no bot√£o "Completar Informa√ß√µes"
        try {
            // Abordagem 1: Localizar pelo texto exato no link (a) em vez de bot√£o
            console.log('Tentando localizar o link "Completar Informa√ß√µes"...');
            const completarLink = await page.locator('a:has-text("Completar Informa√ß√µes")').first();
            if (await completarLink.isVisible()) {
                await completarLink.click();
                console.log('‚úÖ Abordagem 1: Clicou no link "Completar Informa√ß√µes"');
            }
            // Abordagem 2: Localizar pelo href que cont√©m "edicao-de-espaco"
            else {
                console.log('Tentando abordagem alternativa pelo href...');
                const editLink = await page.locator('a[href*="edicao-de-espaco"]').first();
                if (await editLink.isVisible()) {
                    await editLink.click();
                    console.log('‚úÖ Abordagem 2: Clicou no link para edi√ß√£o do espa√ßo');
                }
                // Abordagem 3: Localizar o √∫ltimo link na modal__action (que deve ser o Completar Informa√ß√µes)
                else {
                    console.log('Tentando terceira abordagem...');
                    const actionLinks = await page.locator('div.modal__action a').all();
                    if (actionLinks.length > 0) {
                        // Pega o √∫ltimo link (que de acordo com o HTML √© o "Completar Informa√ß√µes")
                        await actionLinks[actionLinks.length - 1].click();
                        console.log('‚úÖ Abordagem 3: Clicou no √∫ltimo link da √°rea de a√ß√µes');
                    }
                    else {
                        throw new Error('N√£o conseguiu localizar o link "Completar Informa√ß√µes"');
                    }
                }
            }
        }
        catch (err) {
            console.log('‚ö†Ô∏è Erro ao clicar em Completar Informa√ß√µes, tentando √∫ltimo recurso...');
            // Abordagem 4: Se n√£o conseguiu clicar pelo texto, tenta clicar na posi√ß√£o aproximada
            const pageSize = await page.evaluate(() => {
                return {
                    width: window.innerWidth,
                    height: window.innerHeight
                };
            });
            // Clica na posi√ß√£o aproximada do link "Completar Informa√ß√µes" (canto inferior direito)
            await page.mouse.click(pageSize.width / 2 + 200, pageSize.height / 2 + 120);
            console.log('‚úÖ Abordagem 4: Clicou na posi√ß√£o aproximada do link "Completar Informa√ß√µes"');
        }
        // 13. Aguarda o redirecionamento para a p√°gina de edi√ß√£o do espa√ßo
        await page.waitForURL('**/edicao-de-espaco/**/#info', { timeout: 10000 });
        // 14. Captura o ID do espa√ßo da URL
        const currentUrl = page.url();
        const spaceIdMatch = currentUrl.match(/\/edicao-de-espaco\/(\d+)/);
        const spaceId = spaceIdMatch ? spaceIdMatch[1] : 'desconhecido';
        console.log(`‚úÖ Redirecionado para p√°gina de edi√ß√£o do espa√ßo. ID: ${spaceId}`);
        console.log(`‚úÖ URL: ${currentUrl}`);
        // Aguarda a p√°gina carregar completamente
        await page.waitForLoadState('networkidle');
        console.log('‚úÖ P√°gina de edi√ß√£o carregada completamente');
        // 15. Preenchimento dos campos na p√°gina de edi√ß√£o do espa√ßo
        console.log('üñäÔ∏è Iniciando preenchimento de campos adicionais...');
        // Aguarda um pouco para garantir que todos os elementos do formul√°rio est√£o vis√≠veis
        await page.waitForTimeout(3000);
        // Fun√ß√£o para scrollar at√© um elemento e torn√°-lo vis√≠vel
        async function scrollToElement(selector) {
            await page.evaluate((sel) => {
                const element = document.querySelector(sel);
                if (element) {
                    element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    return true;
                }
                return false;
            }, selector);
            await page.waitForTimeout(500); // Pequena pausa para a rolagem completar
        }
        // 16. Preenche os campos de endere√ßo
        await scrollToElement('input[name="En_CEP"]');
        // CEP
        await page.fill('input[name="En_CEP"]', '01310-200');
        console.log('‚úÖ Preencheu o CEP');
        // Logradouro
        await page.fill('input[name="En_Nome_Logradouro"]', 'Avenida Paulista');
        console.log('‚úÖ Preencheu o Logradouro');
        // N√∫mero
        await page.fill('input[name="En_Num"]', counter.toString());
        console.log('‚úÖ Preencheu o N√∫mero');
        // Bairro
        await page.fill('input[name="En_Bairro"]', 'Bela Vista');
        console.log('‚úÖ Preencheu o Bairro');
        // Complemento
        await page.fill('input[name="En_Complemento"]', `Sala ${counter}, ${counter}¬∫ andar`);
        console.log('‚úÖ Preencheu o Complemento');
        // Estado (dropdown)
        try {
            await page.selectOption('select:has-text("Acre")', 'SP');
            console.log('‚úÖ Selecionou o Estado SP');
            // Aguarda o dropdown de munic√≠pio carregar
            await page.waitForTimeout(1500);
            // Tenta selecionar o munic√≠pio
            const municipioDropdown = await page.locator('div.field:has-text("Munic√≠pio") select').first();
            if (await municipioDropdown.isVisible()) {
                await municipioDropdown.selectOption('S√£o Paulo');
                console.log('‚úÖ Selecionou o Munic√≠pio S√£o Paulo');
            }
        }
        catch (e) {
            console.log('‚ö†Ô∏è Erro ao selecionar Estado/Munic√≠pio:', e);
        }
        // 17. Preenche campo de acessibilidade
        await scrollToElement('select[name="acessibilidade"]');
        await page.selectOption('select[name="acessibilidade"]', 'Sim');
        console.log('‚úÖ Selecionou acessibilidade "Sim"');
        // 18. Preenche campo de capacidade
        await scrollToElement('input[name="capacidade"]');
        await page.fill('input[name="capacidade"]', `${100 + counter}`);
        console.log('‚úÖ Preencheu capacidade');
        // 19. Preenche hor√°rio de funcionamento
        await scrollToElement('input[name="horario"]');
        await page.fill('input[name="horario"]', 'Segunda a sexta das 8h √†s 18h. S√°bado das 9h √†s 13h.');
        console.log('‚úÖ Preencheu hor√°rio de funcionamento');
        // 20. Preenche informa√ß√µes sobre o espa√ßo
        // Email P√∫blico
        await scrollToElement('input[name="emailPublico"]');
        await page.fill('input[name="emailPublico"]', `espaco-publico-${counter}@example.com`);
        console.log('‚úÖ Preencheu o E-mail p√∫blico');
        // Email Privado
        await page.fill('input[name="emailPrivado"]', `espaco-privado-${counter}@example.com`);
        console.log('‚úÖ Preencheu o E-mail privado');
        // Telefone P√∫blico
        await page.fill('input[name="telefonePublico"]', `(11) 3333-${counter.toString().padStart(4, '0')}`);
        console.log('‚úÖ Preencheu o Telefone p√∫blico');
        // Telefone Privado 1
        await page.fill('input[name="telefone1"]', `(21) 9${counter.toString().padStart(4, '0')}-${counter.toString().padStart(4, '0')}`);
        console.log('‚úÖ Preencheu o Telefone privado 1');
        // Telefone Privado 2
        await page.fill('input[name="telefone2"]', `(31) 9${counter.toString().padStart(4, '0')}-${(counter + 1).toString().padStart(4, '0')}`);
        console.log('‚úÖ Preencheu o Telefone privado 2');
        // 21. Preenche a descri√ß√£o longa
        await scrollToElement('textarea[name="longDescription"]');
        await page.fill('textarea[name="longDescription"]', `Este √© um espa√ßo cultural criado automaticamente para testes (espa√ßo #${counter}). 
    Localizado na Avenida Paulista, o espa√ßo oferece uma biblioteca completa com acervo diversificado. 
    Possui acessibilidade para pessoas com defici√™ncia e capacidade para ${100 + counter} pessoas.`);
        console.log('‚úÖ Preencheu a descri√ß√£o longa');
        // 22. Rola para o final da p√°gina para encontrar o bot√£o Salvar
        await page.evaluate(() => {
            window.scrollTo(0, document.body.scrollHeight);
        });
        await page.waitForTimeout(1000);
        console.log('‚úÖ Rolou para o final da p√°gina');
        // 23. Clica no bot√£o Salvar
        try {
            // Localiza e clica no bot√£o salvar usando v√°rias abordagens
            const salvarButton = await page.locator('button:has-text("Salvar")').first();
            if (await salvarButton.isVisible()) {
                await salvarButton.click();
                console.log('‚úÖ Clicou no bot√£o Salvar');
            }
            else {
                // Abordagem alternativa - localiza por classe comum
                const finalButtons = await page.locator('button.button--primary, .footer button, .form__submit-button').all();
                if (finalButtons.length > 0) {
                    for (const button of finalButtons) {
                        const text = await button.textContent();
                        if (text && text.includes('Salvar')) {
                            await button.click();
                            console.log('‚úÖ Clicou no bot√£o Salvar por texto');
                            break;
                        }
                    }
                    // Se n√£o encontrou por texto, tenta √∫ltimo bot√£o
                    if (finalButtons.length > 0) {
                        await finalButtons[finalButtons.length - 1].click();
                        console.log('‚úÖ Clicou no √∫ltimo bot√£o da p√°gina (provavelmente Salvar)');
                    }
                }
                else {
                    // Alternativa: posi√ß√£o aproximada
                    const pageSize = await page.evaluate(() => {
                        return { width: window.innerWidth, height: window.innerHeight };
                    });
                    await page.mouse.click(pageSize.width - 100, pageSize.height - 50);
                    console.log('‚úÖ Clicou na posi√ß√£o aproximada do bot√£o Salvar');
                }
            }
        }
        catch (error) {
            console.log('‚ö†Ô∏è Erro ao clicar no bot√£o Salvar:', error);
        }
        // 24. Espera e verifica a mensagem "Modifica√ß√µes salvas"
        try {
            // Aguarda a notifica√ß√£o "Modifica√ß√µes salvas" aparecer
            await page.waitForSelector('text="Modifica√ß√µes salvas"', { timeout: 10000 });
            console.log('‚úÖ CONFIRMADO: Mensagem "Modifica√ß√µes salvas" exibida com sucesso!');
            // Verificando se a mensagem est√° vis√≠vel por outro m√©todo, para dupla confirma√ß√£o
            const notificacaoSalvas = await page.locator('text="Modifica√ß√µes salvas"').isVisible();
            if (notificacaoSalvas) {
                console.log('‚úÖ Notifica√ß√£o de sucesso verificada por m√©todo alternativo!');
            }
        }
        catch (e) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel detectar a mensagem "Modifica√ß√µes salvas":', e);
            const anyNotification = await page.locator('.toast-success, .notification, .alert, .notification--success').isVisible();
            if (anyNotification) {
                console.log('‚úÖ Foi exibida uma notifica√ß√£o, mas n√£o foi poss√≠vel confirmar o texto exato');
            }
            else {
                console.log('‚ö†Ô∏è Nenhuma notifica√ß√£o vis√≠vel ap√≥s tentativa de salvar');
            }
        }
        console.log(`‚úÖ Processo finalizado com sucesso! Espa√ßo #${counter} criado com ID: ${spaceId}`);
    }
    catch (error) {
        console.error('‚ùå Erro durante a execu√ß√£o:', error);
        // Opcional: pause para debug interativo quando ocorre erro
        console.log('Pausando execu√ß√£o para debug. Pressione Enter para continuar...');
        // N√£o use page.pause() pois ele pode causar problemas em caso de erro
        // Em vez disso, usamos um prompt b√°sico do Node.js 
        await new Promise(resolve => {
            process.stdin.once('data', () => {
                resolve();
            });
        });
    }
    finally {
        // Adicionando try/catch para evitar erros caso o browser j√° esteja fechado
        try {
            await page.waitForTimeout(3000);
            await browser.close();
        }
        catch (e) {
            console.log('‚ö†Ô∏è Navegador j√° estava fechado ou erro ao fechar');
        }
    }
})();
//# sourceMappingURL=criar-espaco.js.map