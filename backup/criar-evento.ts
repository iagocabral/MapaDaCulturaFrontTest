import { chromium } from 'playwright';
import * as fs from 'fs';
import * as path from 'path';

(async () => {
  // Define o caminho do arquivo que armazenar√° o contador
  const counterFilePath = path.join(__dirname, 'event-counter.txt');
  
  // L√™ o contador atual do arquivo ou usa 1 se n√£o existir
  let counter = 1;
  try {
    if (fs.existsSync(counterFilePath)) {
      counter = parseInt(fs.readFileSync(counterFilePath, 'utf8'), 10) + 1;
    }
  } catch (e) {
    console.log('Iniciando contador em 1');
  }
  
  // Salva o novo valor do contador no arquivo
  fs.writeFileSync(counterFilePath, counter.toString());
  
  // Obt√©m a data/hora atual formatada
  const now = new Date();
  const dateStr = now.toLocaleDateString('pt-BR').replace(/\//g, '-');
  const timeStr = now.toLocaleTimeString('pt-BR').replace(/:/g, '-');
  
  // Nome √∫nico do evento
  const eventName = `Evento Autom√°tico ${counter} (${dateStr} ${timeStr})`;
  
  console.log(`üî¢ Criando evento #${counter}`);
  
  // Configura√ß√£o para tela cheia - ajustada para funcionar melhor no macOS
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 300,
    args: [
      '--start-maximized',
      `--window-size=2560,1600`  // Tamanho grande fixo (ajuste conforme seu monitor)
    ]
  });
  
  // Criando contexto do navegador com tamanho m√°ximo de janela
  const context = await browser.newContext({ 
    storageState: 'auth.json',
    viewport: null // Isso desativa o viewport fixo, permitindo tela cheia
  });
  
  const page = await context.newPage();

  try {
    // Maximizar janela para macOS usando teclas de atalho
    try {
      // Tenta simular Cmd+Ctrl+F para macOS (tela cheia)
      await page.keyboard.press('Meta+Control+f');
      console.log('‚úÖ Enviou comando de teclado para maximizar janela (macOS)');
    } catch (e) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel maximizar via teclado, usando tamanho predefinido');
    }
    
    // 1. Acessa o painel inicial
    await page.goto('https://hmg2-mapa.cultura.gov.br/painel');
    console.log('‚úÖ P√°gina inicial acessada');

    // 2. Clica no bot√£o do navbar "Eventos"
    await page.waitForSelector('text=Eventos', { state: 'visible' });
    await page.click('text=Eventos');
    console.log('‚úÖ Clicou em Eventos');

    // 3. Aguarda a URL mudar para /eventos/#list
    await page.waitForURL('**/eventos/**', { timeout: 10000 });
    console.log('‚úÖ URL mudou para p√°gina de eventos');

    // 4. Aguarda o bot√£o "Criar Evento" aparecer e clica
    await page.waitForSelector('button:has-text("Criar Evento")', { state: 'visible', timeout: 10000 });
    await page.click('button:has-text("Criar Evento")');
    console.log('‚úÖ Clicou em Criar Evento');

    // 5. Aguarda o modal de cria√ß√£o aparecer
    await page.waitForSelector('.modal__content, .v-dialog', { state: 'visible', timeout: 10000 });
    console.log('‚úÖ Modal de cria√ß√£o apareceu');
    
    // Pequena pausa para garantir que o modal esteja totalmente carregado
    await page.waitForTimeout(2000);

    // 6. Preenche o campo "Nome" do evento
    await page.fill('input[placeholder="Nome"], input[name="name"]', eventName);
    console.log(`‚úÖ Preencheu o nome: ${eventName}`);
    
    // 7. Clica para adicionar uma Linguagem cultural
    await page.click('button:has-text("Adicionar nova")');
    console.log('‚úÖ Clicou em Adicionar nova linguagem cultural');
    
    // Aguarda o dropdown/modal de op√ß√µes aparecer
    await page.waitForTimeout(1000);
    
    // 8. Seleciona a linguagem cultural "Artes Circenses"
    try {
      // Aguarda as op√ß√µes aparecerem
      await page.waitForSelector('label:has-text("Artes Circenses")', { timeout: 5000 });
      
      // Clica na op√ß√£o "Artes Circenses"
      await page.click('label:has-text("Artes Circenses")');
      console.log('‚úÖ Selecionou linguagem "Artes Circenses"');
      
      // Fecha o popup/seletor (tenta v√°rias abordagens)
      try {
        // Primeiro tenta clicar em um bot√£o de confirma√ß√£o se existir
        await page.click('button:has-text("Confirmar"), button:has-text("Aplicar"), button:has-text("OK")', { timeout: 3000 });
        console.log('‚úÖ Clicou no bot√£o de confirma√ß√£o');
      } catch (error) {
        console.log('‚ö†Ô∏è N√£o encontrou bot√£o de confirma√ß√£o, tentando fechar de outra forma');
        
        // Se n√£o encontrar bot√£o espec√≠fico, tenta clicar fora do popup para fech√°-lo
        await page.mouse.click(10, 10);
        console.log('‚úÖ Clicou fora para fechar o popup');
        
        // Se ainda estiver aberto, pressiona ESC
        try {
          const isPopupVisible = await page.isVisible('.v-popper__popper--shown, .multiselect__content-wrapper');
          if (isPopupVisible) {
            await page.keyboard.press('Escape');
            console.log('‚úÖ Pressionou ESC para fechar popup');
          }
        } catch (e) {
          // Ignora erro na verifica√ß√£o
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel selecionar linguagem cultural, continuando...', error);
    }
    
    // 9. Adiciona uma descri√ß√£o curta ao evento
    await page.fill('textarea[name="shortDescription"], textarea.textarea--shortDescription', `Evento de teste automatizado #${counter}. Criado para fins de teste do sistema.`);
    console.log('‚úÖ Preencheu descri√ß√£o curta');
    
    // 10. Seleciona classifica√ß√£o et√°ria "Livre"
    try {
      // Encontra o dropdown de classifica√ß√£o et√°ria
      const classificacaoDropdown = await page.locator('select, div.field[data-field="classificacaoEtaria"] select').first();
      await classificacaoDropdown.click();
      console.log('‚úÖ Clicou no dropdown de classifica√ß√£o et√°ria');
      
      // Aguarda um momento para garantir que o dropdown esteja aberto
      await page.waitForTimeout(500);
      
      // Seleciona a op√ß√£o "Livre"
      await page.selectOption('select:visible', { label: 'Livre' });
      console.log('‚úÖ Selecionou classifica√ß√£o et√°ria "Livre"');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao selecionar classifica√ß√£o et√°ria:', error);
      
      // Abordagem alternativa - tentar clicar no dropdown e depois no item correto
      try {
        await page.click('.field:has-text("Classifica√ß√£o Et√°ria")');
        await page.waitForTimeout(500);
        await page.click('text=Livre');
        console.log('‚úÖ Abordagem alternativa para selecionar classifica√ß√£o et√°ria');
      } catch (altError) {
        console.warn('‚ö†Ô∏è Abordagem alternativa tamb√©m falhou:', altError);
      }
    }
    
    // 11. Clica no bot√£o "Criar e Publicar"
    await page.click('button:has-text("Criar e Publicar")');
    console.log('‚úÖ Clicou em Criar e Publicar');
    
    // 12. Aguarda confirma√ß√£o de sucesso (pode ser um modal ou redirecionamento)
try {
    // Aguarda por poss√≠vel modal de confirma√ß√£o
    const confirmacaoSucesso = await page.waitForSelector('text="Evento Criado!"', { state: 'visible', timeout: 5000 });
    if (confirmacaoSucesso) {
      console.log('‚úÖ Modal de confirma√ß√£o "Evento Criado!" apareceu');
      await page.waitForTimeout(1000);
      
      // Clica no link "Completar Informa√ß√µes"
      try {
        // Abordagem 1: Localizar pelo texto exato no link (a) em vez de bot√£o
        console.log('Tentando localizar o link "Completar Informa√ß√µes"...');
        const completarLink = await page.locator('a:has-text("Completar Informa√ß√µes")').first();
        
        if (await completarLink.isVisible()) {
          await completarLink.click();
          console.log('‚úÖ Abordagem 1: Clicou no link "Completar Informa√ß√µes"');
        } 
        // Abordagem 2: Localizar pelo href que cont√©m "edicao-de-evento"
        else {
          console.log('Tentando abordagem alternativa pelo href...');
          const editLink = await page.locator('a[href*="edicao-de-evento"]').first();
          
          if (await editLink.isVisible()) {
            await editLink.click();
            console.log('‚úÖ Abordagem 2: Clicou no link para edi√ß√£o do evento');
          } 
          // Abordagem 3: Localizar o √∫ltimo link na modal__action (que deve ser o Completar Informa√ß√µes)
          else {
            console.log('Tentando terceira abordagem...');
            const actionLinks = await page.locator('div.modal__action a').all();
            
            if (actionLinks.length > 0) {
              // Pega o √∫ltimo link (que de acordo com o HTML √© o "Completar Informa√ß√µes")
              await actionLinks[actionLinks.length - 1].click();
              console.log('‚úÖ Abordagem 3: Clicou no √∫ltimo link da √°rea de a√ß√µes');
            } else {
              throw new Error('N√£o conseguiu localizar o link "Completar Informa√ß√µes"');
            }
          }
        }
      } catch (err) {
        console.log('‚ö†Ô∏è Erro ao clicar em Completar Informa√ß√µes, tentando √∫ltimo recurso...');
        
      
        
        // √öltimo recurso: tenta clicar por coordenadas aproximadas onde o link deveria estar
        // Com base no HTML, o link est√° na parte inferior direita do modal
        const pageSize = await page.evaluate(() => {
          return {
            width: window.innerWidth,
            height: window.innerHeight
          };
        });
        
        // Clica na posi√ß√£o aproximada do link "Completar Informa√ß√µes" (canto inferior direito)
        await page.mouse.click(pageSize.width / 2 + 200, pageSize.height / 2 + 120);
        console.log('‚úÖ Abordagem 4: Clicou na posi√ß√£o aproximada do link "Completar Informa√ß√µes"');
      }
    }
  } catch (e) {
    // Talvez n√£o exista modal e o sistema apenas redirecione
    console.log('‚ö†Ô∏è Modal de confirma√ß√£o n√£o apareceu, verificando redirecionamento');
  }
    
    // 13. Aguarda o redirecionamento para a p√°gina de edi√ß√£o do evento
    // Verifica se estamos em uma p√°gina de edi√ß√£o de evento
    await page.waitForURL('**/edicao-de-evento/**', { timeout: 10000 });
    
    // 14. Captura o ID do evento da URL
    const currentUrl = page.url();
    const eventIdMatch = currentUrl.match(/\/edicao-de-evento\/(\d+)/);
    const eventId = eventIdMatch ? eventIdMatch[1] : 'desconhecido';
    
    console.log(`‚úÖ Redirecionado para p√°gina de edi√ß√£o do evento. ID: ${eventId}`);
    console.log(`‚úÖ URL: ${currentUrl}`);
    
    // Aguarda a p√°gina carregar completamente
    await page.waitForLoadState('networkidle');
    console.log('‚úÖ P√°gina de edi√ß√£o carregada completamente');
    

    // 16. Aguarda um momento para garantir que a p√°gina carregou completamente
    await page.waitForTimeout(2000);
    console.log('‚úÖ Aguardando carregamento completo da p√°gina');

    // 17. Preenche o subt√≠tulo do evento
    try {
      // Localiza o campo de subt√≠tulo usando diferentes abordagens
      const subtitleInput = await page.locator('input[placeholder="Subt√≠tulo"], input[name="subtitle"]').first();
      
      // Se encontrou o campo, preenche
      if (await subtitleInput.isVisible()) {
        await subtitleInput.fill(`Subt√≠tulo do Evento Autom√°tico #${counter}`);
        console.log('‚úÖ Preencheu o subt√≠tulo do evento');
      } else {
        // Se n√£o encontrou, tenta localizar por outra abordagem
        await page.fill('.field:has-text("Subt√≠tulo") input, input[aria-label*="subt√≠tulo"]', 
          `Subt√≠tulo do Evento Autom√°tico #${counter}`);
        console.log('‚úÖ Preencheu o subt√≠tulo por seletor alternativo');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel preencher o subt√≠tulo:', error);
    }
    
    // 18. Rola a p√°gina para baixo para encontrar a se√ß√£o de ocorr√™ncias
    await page.evaluate(() => {
      // Rola 1/3 da p√°gina para baixo
      window.scrollBy(0, window.innerHeight / 2);
    });
    await page.waitForTimeout(1000);
    console.log('‚úÖ Rolou a p√°gina para baixo');
    
    // 19. Localiza e clica no bot√£o "Inserir nova ocorr√™ncia"
    try {
      // Tenta v√°rias abordagens para localizar o bot√£o
      const ocorrenciaButton = await page.locator('button:has-text("Inserir nova ocorr√™ncia")').first();
      
      if (await ocorrenciaButton.isVisible()) {
        await ocorrenciaButton.click();
        console.log('‚úÖ Clicou em "Inserir nova ocorr√™ncia"');
      } else {
        // Tenta seletores alternativos
        try {
          await page.click('button.event-occurrence__add, button:text-matches("(?i)inserir.*ocorr√™ncia")');
          console.log('‚úÖ Clicou no bot√£o de adicionar ocorr√™ncia (seletor alternativo)');
        } catch (e) {
          // Usa o seletor mais gen√©rico baseado na posi√ß√£o na p√°gina
          const buttons = await page.locator('button').all();
          let clicked = false;
          
          for (const button of buttons) {
            const text = await button.textContent();
            if (text && (
                text.includes('ocorr√™ncia') || 
                text.includes('Ocorr√™ncia') || 
                text.includes('nova') || 
                text.includes('inserir')
              )) {
              await button.click();
              console.log('‚úÖ Clicou no bot√£o de ocorr√™ncia por texto parcial');
              clicked = true;
              break;
            }
          }
          
          if (!clicked) {
            // Tenta m√©todo mais espec√≠fico baseado na estrutura da p√°gina
            await page.click('div[data-field="occurrences"] button, #occurrences-section button');
            console.log('‚úÖ Clicou usando seletor estrutural');
          }
        }
      }

      await page.waitForTimeout(500);
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao tentar clicar no bot√£o de inserir ocorr√™ncia:', error);
      
      // √öltima tentativa - clicar no primeiro bot√£o verde na p√°gina
      try {
        await page.click('button.button--primary');
        console.log('‚úÖ Clicou no primeiro bot√£o prim√°rio da p√°gina');
      } catch (e) {
        console.log('‚ö†Ô∏è Falha em todas as tentativas de clicar no bot√£o de ocorr√™ncia');
      }
    }
    
    // Substitua o trecho entre os passos 20-23 (inclus√£o de ocorr√™ncia) com este c√≥digo:

// 20. Aguarda o modal de inser√ß√£o de ocorr√™ncia aparecer
// Substitua o trecho entre os passos 20-23 (inclus√£o de ocorr√™ncia) com este c√≥digo:

// 20. Aguarda o modal de inser√ß√£o de ocorr√™ncia aparecer
try {
    await page.waitForSelector('div.modal__header span:has-text("Inserir ocorr√™ncia no evento")', { state: 'visible', timeout: 10000 });
    console.log('‚úÖ Modal de inser√ß√£o de ocorr√™ncia apareceu');
    
    // 21. Preenche os campos do formul√°rio de ocorr√™ncia
    await page.waitForTimeout(1500); // Aguarda formul√°rio estar pronto
    

// Passo 1: Usa um espa√ßo existente ao inv√©s de criar um novo
try {
  // Clica no bot√£o "+ Adicionar" usando seletores mais espec√≠ficos com base no HTML fornecido
  try {
    // Abordagem mais direta - clicando no bot√£o espec√≠fico com for√ßa
    await page.click('button.button--icon.button--text-outline');
    console.log('‚úÖ Clicou em "+ Adicionar" com for√ßa');
  } catch (e1) {
    // Abordagem alternativa via JavaScript
    const clicouJS = await page.evaluate(() => {
      const botoes = Array.from(document.querySelectorAll('button'));
      const botaoAdicionar = botoes.find(b => 
        (b.textContent && b.textContent.trim().includes('Adicionar')) && 
        b.classList.contains('button--icon')
      );
      
      if (botaoAdicionar) {
        botaoAdicionar.click();
        return true;
      }
      return false;
    });
    
    if (clicouJS) {
      console.log('‚úÖ Clicou em "+ Adicionar" via JavaScript');
    } else {
      throw new Error('Nenhuma abordagem conseguiu clicar no bot√£o de adicionar');
    }
  }

  // Aguarda a lista de espa√ßos aparecer
  await page.waitForTimeout(1500);
  console.log('‚úÖ Aguardou a lista aparecer');
  
  // ===== NOVA IMPLEMENTA√á√ÉO PARA SELE√á√ÉO DE ESPA√áO =====
  
  // Abordagem 1: Clique direto via JavaScript evitando intercepta√ß√£o
  try {
    const espacoSelecionado = await page.evaluate(() => {
      // Seleciona diretamente o primeiro item da lista pelo seletor √∫nico
      const items = document.querySelectorAll('.select-entity__results--item.space');
      if (items && items.length > 0) {
        // Usando evento nativo para garantir que todos os listeners sejam acionados
        const item = items[0];
        
        // Dispara eventos nativos diretamente no elemento
        const mousedownEvent = new MouseEvent('mousedown', {
          bubbles: true,
          cancelable: true,
          view: window
        });
        
        const clickEvent = new MouseEvent('click', {
          bubbles: true,
          cancelable: true,
          view: window
        });
        
        // Dispara os eventos na sequ√™ncia correta
        item.dispatchEvent(mousedownEvent);
        item.dispatchEvent(clickEvent);
        
        return item.querySelector('.label')?.textContent || 'item selecionado';
      }
      return null;
    });
    
    if (espacoSelecionado) {
      console.log(`‚úÖ Selecionou espa√ßo via JavaScript direto: "${espacoSelecionado}"`);
    } else {
      throw new Error('Nenhum item encontrado na lista');
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Abordagem 1 falhou:', e.message);
    
    // Abordagem 2: Usar keyboard para navegar e selecionar
    try {
      // Pressiona Tab para focar na lista
      await page.keyboard.press('Tab');
      await page.waitForTimeout(500);
      
      // Pressiona Enter para selecionar o item focado
      await page.keyboard.press('Enter');
      console.log('‚úÖ Tentativa de sele√ß√£o via teclado (Tab+Enter)');
    } catch (e2) {
      console.log('‚ö†Ô∏è Abordagem 2 falhou:', e2.message);
      
      // Abordagem 3: For√ßa o click m√∫ltiplas vezes com coordenadas espec√≠ficas
      try {
        // Obt√©m ret√¢ngulo da √°rea da lista
        const listBoundingBox = await page.evaluate(() => {
          const list = document.querySelector('.select-entity__results');
          if (!list) return null;
          const rect = list.getBoundingClientRect();
          return {
            x: rect.x,
            y: rect.y,
            width: rect.width,
            height: rect.height
          };
        });
        
        if (listBoundingBox) {
          // Clica no primeiro item (estimando a posi√ß√£o)
          await page.mouse.click(
            listBoundingBox.x + listBoundingBox.width / 2,
            listBoundingBox.y + 30 // Aproximadamente onde est√° o primeiro item
          );
          console.log('‚úÖ Clique posicional no primeiro espa√ßo');
        } else {
          throw new Error('N√£o conseguiu encontrar a √°rea da lista');
        }
      } catch (e3) {
        console.log('‚ö†Ô∏è Abordagem 3 falhou:', e3.message);
        
        // Abordagem 4: Clique no elemento espec√≠fico usando execu√ß√£o de fun√ß√£o
        try {
          // √öltimo recurso - usa um m√©todo mais radical com disparo de evento em todos os itens da lista
          await page.evaluate(() => {
            // Seleciona todos os itens e tenta clicar no primeiro
            document.querySelectorAll('.select-entity__results--item.space').forEach((item, index) => {
              if (index === 0) {
                // Hack: remove quaisquer elementos que possam estar interceptando
                const blockers = document.querySelectorAll('.vfm__content, .vfm__container, [aria-modal="true"]');
                blockers.forEach(el => {
                  if (el instanceof HTMLElement) {
                    el.style.pointerEvents = 'none';
                  }
                });
                
                // Clica no primeiro item
                (item as HTMLElement).click();
                
                // Restaura os bloqueadores
                setTimeout(() => {
                  blockers.forEach(el => {
                    if (el instanceof HTMLElement) {
                      el.style.pointerEvents = '';
                    }
                  });
                }, 1000);
              }
            });
          });
          console.log('‚úÖ Usou hack para desativar interceptadores e clicar no espa√ßo');
        } catch (e4) {
          console.log('‚ö†Ô∏è Todas as abordagens falharam');
          
          // Desiste e continua o resto do script
          console.log('‚úÖ Continuando o script mesmo sem selecionar o espa√ßo');
        }
      }
    }
  }
  
  // Aguarda um momento para garantir que o espa√ßo foi selecionado
  await page.waitForTimeout(1000);

} catch (e: any) { // Explicitly type as any
  console.log('‚ö†Ô∏è Erro no processo de adicionar espa√ßo:', e.message);
  
  // Continua com o script para n√£o bloquear todo o processo
  console.log('‚úÖ Tentando prosseguir mesmo com erro na sele√ß√£o do espa√ßo');
}
    
    // Passo 2: Seleciona a frequ√™ncia como "uma vez" - USANDO CLICK DIRETO NO LABEL para evitar problemas
    try {
      await page.click('label:has-text("uma vez")');
      console.log('‚úÖ Selecionou frequ√™ncia "uma vez" (clicando no label)');
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao selecionar frequ√™ncia por label, tentando pelo input:', e);
      try {
        // Tenta pelo input diretamente
        await page.check('input[type="radio"][name="frequency"][value="once"]');
        console.log('‚úÖ Selecionou frequ√™ncia "uma vez" (pelo input)');
      } catch (inputError) {
        console.log('‚ö†Ô∏è Erro ao selecionar frequ√™ncia pelo input:', inputError);
      }
    }
    
    // Passo 3: Define a data inicial (formato puro de n√∫meros 05082025 = 05/08/2025)
    try {
      // Obt√©m a data de hoje + 2 dias no formato DDMMAAAA
      const hoje = new Date();
      hoje.setDate(hoje.getDate() + 2);
      const dia = String(hoje.getDate()).padStart(2, '0');
      const mes = String(hoje.getMonth() + 1).padStart(2, '0');
      const ano = hoje.getFullYear();
      const dataFormatada = `${dia}${mes}${ano}`;
      
      // Foca no campo e preenche os n√∫meros diretamente
      const dateInput = await page.locator('input.date-input').first();
      await dateInput.click();
      await dateInput.fill(dataFormatada);
      await page.keyboard.press('Tab'); // Move para o pr√≥ximo campo
      console.log(`‚úÖ Preencheu data inicial: ${dataFormatada} (formato DDMMAAAA)`);
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao definir data inicial:', e);
    }
    
    // Passo 4: Define os hor√°rios inicial e final (formato puro de n√∫meros: 1900, 2200)
    try {
      // Define hor√°rio inicial como 19:00 (digitando apenas 1900)
      const timeInputs = await page.locator('input.time-input').all();
      
      // Primeiro input: hor√°rio inicial
      await timeInputs[0].click();
      await timeInputs[0].fill('1900');
      await page.keyboard.press('Tab');
      console.log('‚úÖ Preencheu hor√°rio inicial: 1900');
      
      // Segundo input: hor√°rio final
      await timeInputs[1].click();
      await timeInputs[1].fill('2200');
      await page.keyboard.press('Tab');
      console.log('‚úÖ Preencheu hor√°rio final: 2200');
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao definir hor√°rios:', e);
    }
    
    // Passo 5: Define se √© gratuito - usando CLICK DIRETO NO LABEL
    try {
      await page.click('label:has-text("N√£o")');
      console.log('‚úÖ Marcou evento como n√£o gratuito (clicando no label)');
      
      // Aguarda um momento para os campos aparecerem
      await page.waitForTimeout(500);
      
      // Preenche o valor da entrada (apenas n√∫meros, sem formata√ß√£o: 5000 = R$ 50,00)
      // Pega todos os inputs depois do label "Valor da entrada"
      const valorInputs = await page.locator('span:has-text("Valor da entrada:") + div input, span:has-text("Valor da entrada:") ~ input').all();
      if (valorInputs.length > 0) {
        await valorInputs[0].fill('5000');
        console.log('‚úÖ Preencheu valor da entrada: 5000');
      } else {
        // Tenta alternativa
        await page.fill('div.create-occurrence__section--field input[type="text"]', '5000');
        console.log('‚úÖ Preencheu valor da entrada (seletor alternativo)');
      }
      
      // Preenche informa√ß√µes adicionais sobre a entrada
      const infoInputs = await page.locator('span:has-text("Informa√ß√µes adicionais") + div input, span:has-text("Informa√ß√µes adicionais") ~ input').all();
      if (infoInputs.length > 0) {
        await infoInputs[0].fill('Meia entrada para estudantes');
        console.log('‚úÖ Preencheu informa√ß√µes adicionais sobre a entrada');
      } else {
        // Seletor alternativo - pega o segundo input de texto ap√≥s o radio "N√£o"
        const inputs = await page.locator('label:has-text("N√£o") ~ div input[type="text"]').all();
        if (inputs.length > 1) {
          await inputs[1].fill('Meia entrada para estudantes');
          console.log('‚úÖ Preencheu informa√ß√µes adicionais (seletor alternativo)');
        }
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao configurar informa√ß√µes de entrada:', e);
    }
    
    // Passo 6: Preenche o resumo das informa√ß√µes
    try {
      // Usa um seletor mais espec√≠fico para o √∫ltimo campo de input
      await page.fill('input[name="description"], input[placeholder*="resumo customizado"], div.create-occurrence__section:last-child input[type="text"]', 
        `Sess√£o especial do evento #${counter}. Teatro Municipal.`);
      console.log('‚úÖ Preencheu o resumo das informa√ß√µes');
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao preencher resumo:', e);
    }
    
    // 22. Clica no bot√£o para inserir a ocorr√™ncia
    try {
      // Tenta clicar no bot√£o "Inserir ocorr√™ncia" na vers√£o desktop
      await page.click('div.desktop button.button--primary');
      console.log('‚úÖ Clicou no bot√£o "Inserir ocorr√™ncia" na vers√£o desktop');
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao clicar no bot√£o desktop, tentando outras abordagens:', e);
      
      try {
        // Tenta clicar em qualquer bot√£o prim√°rio no rodap√©
        const botoes = await page.locator('.modal__action button.button--primary').all();
        if (botoes.length > 0) {
          await botoes[botoes.length - 1].click(); // Clica no √∫ltimo bot√£o prim√°rio
          console.log('‚úÖ Clicou no √∫ltimo bot√£o prim√°rio');
        } else {
          // Se n√£o encontrar, tenta o bot√£o "Pr√≥ximo" na vers√£o mobile
          await page.click('div.mobile button:has-text("Pr√≥ximo")');
          console.log('‚úÖ Clicou no bot√£o "Pr√≥ximo" na vers√£o mobile');
          
          // Se clicou em pr√≥ximo, precisa continuar navegando at√© finalizar
          await page.waitForTimeout(1000);
          
          // Tenta continuar at√© o final (se houver steps)
          let maxSteps = 5;
          while (maxSteps > 0) {
            try {
              await page.click('div.mobile button:has-text("Pr√≥ximo"), div.mobile button:has-text("Inserir"), button.button--primary');
              console.log(`‚úÖ Clicou em pr√≥ximo/inserir (step ${5-maxSteps+1})`);
              await page.waitForTimeout(1000);
              maxSteps--;
            } catch (e) {
              console.log('‚úÖ N√£o h√° mais bot√µes de pr√≥ximo/inserir');
              break;
            }
          }
        }
      } catch (btnError) {
        console.log('‚ö†Ô∏è Todas as tentativas de clicar no bot√£o falharam:', btnError);
      }
    }
    
    // 23. Aguarda o modal fechar
    await page.waitForSelector('div.modal__header span:has-text("Inserir ocorr√™ncia no evento")', { state: 'hidden', timeout: 10000 })
      .catch(() => console.log('‚ö†Ô∏è Modal pode n√£o ter fechado, continuando...'));
    
    await page.waitForTimeout(1000);
    console.log('‚úÖ Processo de inser√ß√£o de ocorr√™ncia finalizado');
    
  } catch (modalError) {
    console.log('‚ö†Ô∏è Problema ao interagir com o modal de ocorr√™ncia:', modalError);
  }
    
    // 24. Continua preenchendo os outros campos da p√°gina principal
    await page.waitForTimeout(1500); // Pequena pausa
    
    // Rola para as se√ß√µes inferiores
    await page.evaluate(() => {
      window.scrollBy(0, 500); // Rola mais para baixo
    });
    await page.waitForTimeout(1000);
    
    // 25. Preenche campos de informa√ß√µes sobre o evento (se dispon√≠veis)
    try {
      // Tenta preencher o campo "Total de p√∫blico"
      const publicoInput = await page.locator('input[name="event_attendance"]').first();
      if (await publicoInput.isVisible()) {
        await publicoInput.fill('200');
        console.log('‚úÖ Preencheu total de p√∫blico');
      } else {
        // Abordagem alternativa
        await page.fill('input[id*="event_attendance"], .field[data-field="event_attendance"] input', '200');
        console.log('‚úÖ Preencheu total de p√∫blico (seletor alternativo)');
      }
      
      // Tenta preencher telefone
      const telefoneInput = await page.locator('input[name="telefonePublico"]').first();
      if (await telefoneInput.isVisible()) {
        await telefoneInput.fill('(11) 99999-9999');
        console.log('‚úÖ Preencheu telefone para informa√ß√µes');
      } else {
        // Abordagem alternativa
        await page.fill('input[id*="telefonePublico"], .field[data-field="telefonePublico"] input', '(11) 99999-9999');
        console.log('‚úÖ Preencheu telefone (seletor alternativo)');
      }
      
      // Preenche informa√ß√µes sobre inscri√ß√£o
      const inscricaoInput = await page.locator('input[name="registrationInfo"]').first();
      if (await inscricaoInput.isVisible()) {
        await inscricaoInput.fill('Inscri√ß√µes pelo telefone ou email do evento.');
        console.log('‚úÖ Preencheu informa√ß√µes sobre inscri√ß√£o');
      } else {
        // Abordagem alternativa
        await page.fill('input[id*="registrationInfo"], .field[data-field="registrationInfo"] input', 
          'Inscri√ß√µes pelo telefone ou email do evento.');
        console.log('‚úÖ Preencheu informa√ß√µes sobre inscri√ß√£o (seletor alternativo)');
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao preencher informa√ß√µes sobre o evento:', e);
    }
    
    // 26. Preenche se√ß√£o de acessibilidade
    try {
      // Rola para a se√ß√£o de acessibilidade
      await page.evaluate(() => {
        // Tenta encontrar o elemento de acessibilidade
        const acessibilidade = document.querySelector('h3.bold:contains("Acessibilidade"), header:contains("Acessibilidade")');
        if (acessibilidade) {
          acessibilidade.scrollIntoView({ behavior: 'smooth', block: 'center' });
          return true;
        } else {
          // Se n√£o encontrar, apenas rola mais para baixo
          window.scrollBy(0, 500);
          return false;
        }
      });
      await page.waitForTimeout(1000);
      
      // Seleciona "Sim" para Libras usando label direto
      await page.evaluate(() => {
        const librasLabels = Array.from(document.querySelectorAll('label.event-info__field'));
        const simLibrasLabel = librasLabels.find(label => 
          label.textContent?.includes('Sim') && 
          label.closest('div')?.previousElementSibling?.textContent?.includes('Libras')
        );
        
        if (simLibrasLabel) {
          (simLibrasLabel.querySelector('input[type="radio"]') as HTMLElement).click();
          return true;
        }
        return false;
      });
      console.log('‚úÖ Selecionou "Sim" para Libras');
      
      // Seleciona "Sim" para √Åudio Descri√ß√£o usando label direto
      await page.evaluate(() => {
        const audioLabels = Array.from(document.querySelectorAll('label.event-info__field'));
        const simAudioLabel = audioLabels.find(label => 
          label.textContent?.includes('Sim') && 
          label.closest('div')?.previousElementSibling?.textContent?.includes('√Åudio')
        );
        
        if (simAudioLabel) {
          (simAudioLabel.querySelector('input[type="radio"]') as HTMLElement).click();
          return true;
        }
        return false;
      });
      console.log('‚úÖ Selecionou "Sim" para √Åudio Descri√ß√£o');
      
      // Abordagem alternativa se a anterior falhar
      if (await page.locator('input[name="traducaoLibras"][value="Sim"]').count() > 0) {
        await page.check('input[name="traducaoLibras"][value="Sim"]');
        console.log('‚úÖ Marcou "Sim" para Libras (abordagem alternativa)');
      }
      
      if (await page.locator('input[name="descricaoSonora"][value="Sim"]').count() > 0) {
        await page.check('input[name="descricaoSonora"][value="Sim"]');
        console.log('‚úÖ Marcou "Sim" para √Åudio Descri√ß√£o (abordagem alternativa)');
      }
      
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao preencher se√ß√£o de acessibilidade:', e);
    }
    
    // 27. Preenchimento da se√ß√£o de apresenta√ß√£o (√∫ltimo bloco)
    await page.evaluate(() => {
      window.scrollBy(0, 1000); // Rola para bem baixo para chegar √† apresenta√ß√£o
    });
    await page.waitForTimeout(1000);
    
    try {
      // Tenta preencher o campo de apresenta√ß√£o
      const apresentacaoTextarea = await page.locator('textarea[name="presentation"], div:has-text("Apresenta√ß√£o") + div textarea, div.field--presentation textarea').first();
      
      if (await apresentacaoTextarea.isVisible()) {
        await apresentacaoTextarea.fill(`Apresenta√ß√£o detalhada do evento automatizado #${counter}. Este evento faz parte de um conjunto de testes automatizados para valida√ß√£o do sistema. O evento contar√° com v√°rias atra√ß√µes culturais e est√° adaptado para pessoas com necessidades especiais, incluindo int√©rpretes de libras e √°udio descri√ß√£o.`);
        console.log('‚úÖ Preencheu campo de apresenta√ß√£o');
      } else {
        // Tentativa alternativa - usando avalia√ß√£o JavaScript
        const preencherApresentacao = await page.evaluate((counter) => {
          // Procura por qualquer textarea na p√°gina que esteja em uma se√ß√£o que possa ser de apresenta√ß√£o
          const textareas = document.querySelectorAll('textarea');
          let apresentacaoElement = null;
          
          // Verifica todos os textareas
          for (const textarea of textareas) {
            // Se ainda n√£o encontramos e este n√£o foi preenchido
            if (!apresentacaoElement && (!textarea.value || textarea.value.trim() === '')) {
              // Verifica se tem um r√≥tulo de apresenta√ß√£o pr√≥ximo
              const nearbyText = textarea.closest('div')?.textContent?.toLowerCase() || '';
              if (nearbyText.includes('apresenta√ß√£o') || nearbyText.includes('apresentacao') || 
                  nearbyText.includes('descri√ß√£o') || nearbyText.includes('descricao')) {
                apresentacaoElement = textarea;
                break;
              }
              
              // Se ainda n√£o encontrou, pega o √∫ltimo textarea vazio
              apresentacaoElement = textarea;
            }
          }
          
          // Se encontrou algum textarea, preenche
          if (apresentacaoElement) {
            apresentacaoElement.value = `Apresenta√ß√£o detalhada do evento automatizado #${counter}. Este evento faz parte de um conjunto de testes automatizados para valida√ß√£o do sistema. O evento contar√° com v√°rias atra√ß√µes culturais e est√° adaptado para pessoas com necessidades especiais, incluindo int√©rpretes de libras e √°udio descri√ß√£o.`;
            
            // Dispara eventos para garantir que a mudan√ßa seja registrada
            apresentacaoElement.dispatchEvent(new Event('input', { bubbles: true }));
            apresentacaoElement.dispatchEvent(new Event('change', { bubbles: true }));
            return true;
          }
          return false;
        }, counter);
        
        if (preencherApresentacao) {
          console.log('‚úÖ Preencheu campo de apresenta√ß√£o via JavaScript');
        } else {
          console.log('‚ö†Ô∏è N√£o encontrou campo de apresenta√ß√£o para preencher');
        }
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao preencher apresenta√ß√£o:', e);
    }
    
    // 29. Rola para o final da p√°gina para encontrar o bot√£o Salvar
    await page.evaluate(() => {
      window.scrollTo(0, document.body.scrollHeight);
    });
    await page.waitForTimeout(1000);
    console.log('‚úÖ Rolou para o final da p√°gina');
    
    // 30. Clica no bot√£o Salvar
    try {
      // Localiza e clica no bot√£o salvar usando v√°rias abordagens
      const salvarButton = await page.locator('button:has-text("Salvar")').first();
      if (await salvarButton.isVisible()) {
        await salvarButton.click();
        console.log('‚úÖ Clicou no bot√£o Salvar');
      } else {
        // Abordagem alternativa - localiza por classe comum
        const finalButtons = await page.locator('button.button--primary, .footer button, .form__submit-button').all();
        
        if (finalButtons.length > 0) {
          for (const button of finalButtons) {
            const text = await button.textContent();
            if (text && text.includes('Salvar')) {
              await button.click();
              console.log('‚úÖ Clicou no bot√£o Salvar por texto');
              break;
            }
          }
          
          // Se n√£o encontrou por texto, tenta √∫ltimo bot√£o
          if (finalButtons.length > 0) {
            await finalButtons[finalButtons.length - 1].click();
            console.log('‚úÖ Clicou no √∫ltimo bot√£o da p√°gina (provavelmente Salvar)');
          }
        } else {
          // Alternativa: posi√ß√£o aproximada
          const pageSize = await page.evaluate(() => {
            return { width: window.innerWidth, height: window.innerHeight };
          });
          await page.mouse.click(pageSize.width - 100, pageSize.height - 50);
          console.log('‚úÖ Clicou na posi√ß√£o aproximada do bot√£o Salvar');
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao clicar no bot√£o Salvar:', error);
    }
    
    // 31. Espera e verifica a mensagem "Modifica√ß√µes salvas"
    try {
      await page.waitForSelector('text="Modifica√ß√µes salvas"', { timeout: 10000 });
      console.log('‚úÖ CONFIRMADO: Mensagem "Modifica√ß√µes salvas" exibida com sucesso!');
    } catch (e) {
      console.log('‚ö†Ô∏è N√£o detectou mensagem de confirma√ß√£o:', e);
    }

    console.log(`‚úÖ Processo finalizado com sucesso! Evento #${counter} criado e configurado com ID: ${eventId}`)

    await page.pause();
  } finally {
    await page.waitForTimeout(3000);
    await browser.close();
  }
})();