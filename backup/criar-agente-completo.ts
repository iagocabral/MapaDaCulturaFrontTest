import { chromium } from 'playwright';
import * as fs from 'fs';
import * as path from 'path';

(async () => {
  // Define o caminho do arquivo que armazenar√° o contador
  const counterFilePath = path.join(__dirname, 'agent-counter.txt');
  const targetEnvPath = path.join(__dirname, '../config/target-env.json'); // Adjusted path

  // L√™ o contador atual do arquivo ou usa 1 se n√£o existir
  let counter = 1;
  try {
    if (fs.existsSync(counterFilePath)) {
      counter = parseInt(fs.readFileSync(counterFilePath, 'utf8'), 10) + 1;
    }
  } catch (e) {
    console.log('Iniciando contador em 1');
  }
  
  // Salva o novo valor do contador no arquivo
  fs.writeFileSync(counterFilePath, counter.toString());
  
  // Obt√©m a data/hora atual formatada
  const now = new Date();
  const dateStr = now.toLocaleDateString('pt-BR').replace(/\//g, '-');
  const timeStr = now.toLocaleTimeString('pt-BR').replace(/:/g, '-');
  
  // Nome √∫nico do agente
  const agentName = `Agente Autom√°tico ${counter} (${dateStr} ${timeStr})`;
  
  console.log(`üî¢ Criando agente #${counter}`);

  let targetUrl: string;
  try {
    if (!fs.existsSync(targetEnvPath)) {
      console.error(`Error: ${targetEnvPath} not found. Please configure target environment via UI first.`);
      process.exit(1);
    }
    const rawTargetData = fs.readFileSync(targetEnvPath, 'utf-8');
    if (!rawTargetData.trim()) {
      console.error(`Error: ${targetEnvPath} is empty. Please ensure target environment is configured.`);
      process.exit(1);
    }
    const targetData = JSON.parse(rawTargetData);
    if (!targetData.targetUrl) {
      console.error(`Error: targetUrl not found in ${targetEnvPath}.`);
      process.exit(1);
    }
    targetUrl = targetData.targetUrl;
    console.log(`üéØ Using target URL: ${targetUrl}`);
  } catch (error) {
    console.error(`Error reading or parsing ${targetEnvPath}:`, error);
    process.exit(1);
  }
  
  // Configura√ß√£o para tela cheia - ajustada para funcionar melhor no macOS
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 300,
    args: [
      '--start-maximized',
      `--window-size=2560,1600`  // Tamanho grande fixo (ajuste conforme seu monitor)
    ]
  });
  
  // Criando contexto do navegador com tamanho m√°ximo de janela
  const context = await browser.newContext({ 
    storageState: path.join(__dirname, '../config/auth.json'), // Adjusted path for auth.json
    viewport: null // Isso desativa o viewport fixo, permitindo tela cheia
  });
  
  const page = await context.newPage();

  try {
    // Maximizar janela para macOS usando teclas de atalho
    try {
      // Tenta simular Cmd+Ctrl+F para macOS (tela cheia)
      await page.keyboard.press('Meta+Control+f');
      console.log('‚úÖ Enviou comando de teclado para maximizar janela (macOS)');
    } catch (e) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel maximizar via teclado, usando tamanho predefinido');
    }
    
    // 1. Acessa o painel inicial
    await page.goto(targetUrl); // Use the dynamic target URL
    console.log('‚úÖ P√°gina inicial acessada');

    // 2. Clica no bot√£o do navbar "Agentes"
    await page.waitForSelector('text=Agentes', { state: 'visible' });
    await page.click('text=Agentes');
    console.log('‚úÖ Clicou em Agentes');

    // 3. Aguarda a URL mudar para /agentes/#list
    await page.waitForURL('**/agentes/#list');
    console.log('‚úÖ URL mudou para agentes/#list');

    // 4. Aguarda o bot√£o "Criar Agente" aparecer e clica
    await page.waitForSelector('button:has-text("Criar Agente")', { state: 'visible', timeout: 10000 });
    await page.click('button:has-text("Criar Agente")');
    console.log('‚úÖ Clicou em Criar Agente');

    // 5. Aguarda o modal de cria√ß√£o aparecer
    await page.waitForSelector('.modal__content, div[data-v-2836fdb5-s].modal__content', { state: 'visible', timeout: 10000 });
    console.log('‚úÖ Modal de cria√ß√£o apareceu');
    
    // Pequena pausa para garantir que o modal esteja totalmente carregado
    await page.waitForTimeout(2000);

    // 6. Clica no dropdown de tipo de agente e seleciona Coletivo
    // Primeiro localizamos o dropdown e clicamos nele
    await page.click('select, div.field[data-field="type"] select');
    console.log('‚úÖ Clicou no dropdown de tipo');
    
    // Aguarda um momento para garantir que o dropdown esteja aberto
    await page.waitForTimeout(500);
    
    // Seleciona a op√ß√£o "Coletivo" (usando texto ou valor)
    await page.selectOption('select:visible', { label: 'Coletivo' });
    console.log('‚úÖ Selecionou tipo de agente');
    
    // 7. Preenche o campo "Nome" com nome √∫nico
    await page.fill('input[name="name"], input#default-agent-undefined--name--vb3q6qaq9w', agentName);
    console.log(`‚úÖ Preencheu o nome: ${agentName}`);
    
    // 8. Preenche o campo "Descri√ß√£o curta"
    await page.fill('textarea[name="shortDescription"]', `Esse agente foi criado automaticamente (ID: ${counter})`);
    console.log('‚úÖ Preencheu a descri√ß√£o curta');
    
    // 9. Adiciona √Årea de Atua√ß√£o
    // Localiza o bot√£o "Adicionar nova" na se√ß√£o de √Årea de Atua√ß√£o
    await page.waitForSelector('.entity-terms button:has-text("Adicionar nova")', { state: 'visible', timeout: 5000 });
    await page.click('.entity-terms button:has-text("Adicionar nova")');
    console.log('‚úÖ Clicou em Adicionar nova √°rea de atua√ß√£o');
    
    // Aguarda o dropdown de op√ß√µes aparecer
    await page.waitForTimeout(1000);
    
    // Agora seleciona "Acervos" na lista de op√ß√µes
    try {
      // Aguarda o popup aparecer
      await page.waitForSelector('.mc-multiselect__option', { state: 'visible', timeout: 5000 });
      
      // Clica na op√ß√£o "Acervos" (corrigindo o seletor)
      await page.click('label:has-text("Acervos")');
      console.log('‚úÖ Selecionou √°rea de atua√ß√£o "Acervos"');
      
      // Importante: Feche o dropdown/popup explicitamente
      // Primeiro tenta clicar em um bot√£o de confirma√ß√£o
      try {
        await page.click('button:has-text("Confirmar"), button:has-text("Aplicar"), button:has-text("OK")', { timeout: 3000 });
        console.log('‚úÖ Clicou no bot√£o de confirma√ß√£o');
      } catch (error) {
        console.log('‚ö†Ô∏è N√£o encontrou bot√£o de confirma√ß√£o, tentando fechar de outra forma');
        
        // Se n√£o encontrar bot√£o espec√≠fico, tenta clicar fora do popup para fech√°-lo
        await page.mouse.click(10, 10);
        console.log('‚úÖ Clicou fora para fechar o popup');
        
        // Se ainda estiver aberto, pressiona ESC
        try {
          const isPopupVisible = await page.isVisible('.v-popper__popper--shown');
          if (isPopupVisible) {
            await page.keyboard.press('Escape');
            console.log('‚úÖ Pressionou ESC para fechar popup');
            await page.waitForTimeout(500);
          }
        } catch (e) {
          // Ignora erro na verifica√ß√£o
        }
      }
      
      // Verificar se o popup foi fechado
      try {
        const stillVisible = await page.isVisible('.v-popper__popper--shown');
        if (stillVisible) {
          console.log('‚ö†Ô∏è Popup ainda est√° vis√≠vel, tentando fechar novamente');
          await page.keyboard.press('Escape');
          await page.waitForTimeout(1000);
        }
      } catch (e) {
        // Ignora erro na verifica√ß√£o
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel selecionar √°rea de atua√ß√£o, continuando...', error);
    }
    
    // 10. Clica no bot√£o "Criar e Publicar"
    await page.click('.modal__action button.button--primary');
    console.log('‚úÖ Clicou em Criar e Publicar');

    // 11. Aguarda a confirma√ß√£o de sucesso (modal "Agente Criado!")
    await page.waitForSelector('text="Agente Criado!"', { state: 'visible', timeout: 10000 });
    console.log('‚úÖ Modal de confirma√ß√£o "Agente Criado!" apareceu');
    
    // Pequena pausa para garantir que o modal carregue completamente
    await page.waitForTimeout(1000);
    
    // 12. Clica no bot√£o "Completar Informa√ß√µes" - usando seletores mais precisos
    // Baseado nas imagens, ajustamos o seletor para ser mais espec√≠fico
    try {
      // Tenta v√°rias abordagens para localizar o bot√£o
      console.log('Tentando localizar o bot√£o "Completar Informa√ß√µes"...');
      
      // Abordagem 1: Localizar pelo texto exato
      const completarBtn = await page.locator('button:has-text("Completar Informa√ß√µes")').first();
      if (await completarBtn.isVisible()) {
        await completarBtn.click();
        console.log('‚úÖ Abordagem 1: Clicou em "Completar Informa√ß√µes"');
      }
      // Abordagem 2: Localizar dentro do modal usando o bot√£o do meio
      else {
        console.log('Tentando abordagem alternativa...');
        // Baseado na imagem, sabemos que √© o bot√£o do meio no modal
        const buttons = await page.locator('div.v-dialog button').all();
        if (buttons.length >= 2) {
          // Bot√£o do meio (Completar Informa√ß√µes) est√° entre Ver Agente e Completar Depois
          await buttons[1].click(); 
          console.log('‚úÖ Abordagem 2: Clicou no bot√£o do meio (Completar Informa√ß√µes)');
        } else {
          throw new Error('N√£o conseguiu localizar o bot√£o "Completar Informa√ß√µes"');
        }
      }
    } catch (err) {
      console.log('‚ö†Ô∏è Erro ao clicar em Completar Informa√ß√µes, tentando √∫ltimo recurso...');

      
      // √öltimo recurso: tenta clicar por coordenadas aproximadas onde o bot√£o deveria estar
      // Com base na imagem, o bot√£o Completar Informa√ß√µes est√° no meio inferior do modal
      const pageSize = await page.evaluate(() => {
        return {
          width: window.innerWidth,
          height: window.innerHeight
        };
      });
      
      // Clica no meio da tela, um pouco abaixo do centro (onde geralmente est√° o bot√£o principal)
      await page.mouse.click(pageSize.width / 2, pageSize.height / 2 + 100);
      console.log('‚úÖ Abordagem 3: Clicou na posi√ß√£o aproximada do bot√£o "Completar Informa√ß√µes"');
    }
    
    // Restante do c√≥digo permanece o mesmo...
    // 13. Aguarda o redirecionamento para a p√°gina de edi√ß√£o do agente
    await page.waitForURL('**/edicao-de-agente/**/#info', { timeout: 10000 });
    
    // 14. Captura o ID do agente da URL
    const currentUrl = page.url();
    const agentIdMatch = currentUrl.match(/\/edicao-de-agente\/(\d+)/);
    const agentId = agentIdMatch ? agentIdMatch[1] : 'desconhecido';
    
    console.log(`‚úÖ Redirecionado para p√°gina de edi√ß√£o do agente. ID: ${agentId}`);
    console.log(`‚úÖ URL: ${currentUrl}`);
    
    // Aguarda a p√°gina carregar completamente
    await page.waitForLoadState('networkidle');
    console.log('‚úÖ P√°gina de edi√ß√£o carregada completamente');
    
    // 15. Preenchimento dos campos na p√°gina de edi√ß√£o do agente
    console.log('üñäÔ∏è Iniciando preenchimento de campos adicionais...');
    
    // Aguarda um pouco para garantir que todos os elementos do formul√°rio est√£o vis√≠veis
    await page.waitForTimeout(3000);
    
    // ============= ATUALIZA√á√ÉO DOS SELETORES BASEADO NO HTML REAL =============
    
    // Fun√ß√£o para scrollar at√© um elemento e torn√°-lo vis√≠vel
    // Corrigindo para usar seletores compat√≠veis com document.querySelector
    async function scrollToElement(selector: string) {
      await page.evaluate((sel) => {
        const element = document.querySelector(sel);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
          return true;
        }
        return false;
      }, selector);
      await page.waitForTimeout(500); // Pequena pausa para a rolagem completar
    }

    // Preenche o campo "Nome Fantasia"
    await scrollToElement('input[name="nomeSocial"]');
    await page.fill('input[name="nomeSocial"]', `Fantasia ${agentName}`);
    console.log('‚úÖ Preencheu o Nome Fantasia');
    
    // Preenche o campo "Raz√£o Social"
    await scrollToElement('input[name="nomeCompleto"]');
    await page.fill('input[name="nomeCompleto"]', `Raz√£o Social ${counter}`);
    console.log('‚úÖ Preencheu a Raz√£o Social');
    
    // Preenche o campo "CNPJ"
    // Gerando um CNPJ v√°lido para teste com m√°scara correta
    const cnpj = `41491233000111`;
    await scrollToElement('input[name="cnpj"]');
    await page.fill('input[name="cnpj"]', cnpj);
    console.log('‚úÖ Preencheu o CNPJ');
    
    // Preenche a data de funda√ß√£o
    const randomYear = 1980 + Math.floor(Math.random() * 40); // Entre 1980 e 2020
    const randomMonth = 1 + Math.floor(Math.random() * 12); // Entre 1 e 12
    const randomDay = 1 + Math.floor(Math.random() * 28); // Entre 1 e 28
    const dataFundacao = `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear}`;
    
    await scrollToElement('.date-input');
    await page.fill('.date-input', dataFundacao);
    console.log('‚úÖ Preencheu a Data de Funda√ß√£o');
    
    // Preenche o campo "E-mail privado"
    await scrollToElement('input[name="emailPrivado"]');
    await page.fill('input[name="emailPrivado"]', `email-privado-${counter}@example.com`);
    console.log('‚úÖ Preencheu o E-mail privado');
    
    // Preenche o campo "Telefone p√∫blico com DDD"
    await scrollToElement('input[name="telefonePublico"]');
    await page.fill('input[name="telefonePublico"]', `(11) 3333-${counter.toString().padStart(4, '0')}`);
    console.log('‚úÖ Preencheu o Telefone p√∫blico');
    
    // Preenche o campo "E-mail p√∫blico"
    await scrollToElement('input[name="emailPublico"]');
    await page.fill('input[name="emailPublico"]', `contato-publico-${counter}@agente-auto.com`);
    console.log('‚úÖ Preencheu o E-mail p√∫blico');
    
    // Preenche os telefones privados
    await scrollToElement('input[name="telefone1"]');
    await page.fill('input[name="telefone1"]', `(21) 9${counter.toString().padStart(4, '0')}-${counter.toString().padStart(4, '0')}`);
    console.log('‚úÖ Preencheu o Telefone privado 1');
    
    await scrollToElement('input[name="telefone2"]');
    await page.fill('input[name="telefone2"]', `(31) 9${counter.toString().padStart(4, '0')}-${(counter+1).toString().padStart(4, '0')}`);
    console.log('‚úÖ Preencheu o Telefone privado 2');
    
    // Preenche os campos de endere√ßo
    await scrollToElement('input[name="En_CEP"]');
    
    // CEP
    await page.fill('input[name="En_CEP"]', '01310-200');
    console.log('‚úÖ Preencheu o CEP');
    
    // Logradouro
    await page.fill('input[name="En_Nome_Logradouro"]', 'Avenida Paulista');
    console.log('‚úÖ Preencheu o Logradouro');
    
    // N√∫mero
    await page.fill('input[name="En_Num"]', counter.toString());
    console.log('‚úÖ Preencheu o N√∫mero');
    
    // Bairro
    await page.fill('input[name="En_Bairro"]', 'Bela Vista');
    console.log('‚úÖ Preencheu o Bairro');
    
    // Complemento
    await page.fill('input[name="En_Complemento"]', `Sala ${counter}, ${counter}¬∫ andar`);
    console.log('‚úÖ Preencheu o Complemento');
    
    // Estado (dropdown)
    // await page.waitForSelector('.col-12 .grid-12 .field select');
    // await page.selectOption('.col-12 .grid-12 .field select:first-of-type', 'SP');
    // console.log('‚úÖ Selecionou o Estado');

    // // Aguarda o dropdown de munic√≠pio carregar
    // await page.waitForTimeout(1500);

    // // Munic√≠pio (dropdown) - tenta localizar ap√≥s Estado ser selecionado
    // try {
    //     await page.waitForSelector('.col-12 .grid-12 .field select:nth-of-type(2):not(:disabled)', { timeout: 3000 });
    //     await page.selectOption('.col-12 .grid-12 .field select:nth-of-type(2)', { label: 'S√£o Paulo' });
    //     console.log('‚úÖ Selecionou o Munic√≠pio');
    // } catch (e) {
    //     console.log('‚ö†Ô∏è N√£o foi poss√≠vel selecionar o munic√≠pio: ', e);
    // }
    
    // Preenche a descri√ß√£o longa na segunda parte do formul√°rio
    await page.evaluate(() => {
      // Rola para a segunda parte do formul√°rio
      window.scrollBy(0, 500);
    });
    await page.waitForTimeout(500);
    
    await page.waitForSelector('textarea[name="longDescription"]');
    await page.fill('textarea[name="longDescription"]', `Esta √© uma descri√ß√£o longa gerada automaticamente para o agente de teste #${counter}. Este agente foi criado usando automa√ß√£o como parte dos testes do sistema.`);
    console.log('‚úÖ Preencheu a Descri√ß√£o Longa');
    
    // 16. Salva as altera√ß√µes
    // Rola para o final da p√°gina para encontrar o bot√£o Salvar
    await page.evaluate(() => {
      window.scrollTo(0, document.body.scrollHeight);
    });
    await page.waitForTimeout(1000);
    console.log('‚úÖ Rolou para o final da p√°gina');
    
    
    // Identificando o bot√£o Salvar pelo texto exato na parte inferior da tela
    // Na captura de tela, vemos que h√° um bot√£o "Salvar" na barra inferior direita
    try {
      // Localizando bot√µes na √°rea inferior da p√°gina
      const buttons = await page.locator('button').all();
      let salvarClicado = false;
      
      // Examina cada bot√£o para encontrar o "Salvar"
      for (const button of buttons) {
        const buttonText = await button.textContent();
        if (buttonText && buttonText.trim() === 'Salvar') {
          await button.click();
          console.log('‚úÖ Clicou no bot√£o Salvar (texto exato)');
          salvarClicado = true;
          break;
        }
      }
      
      // Se n√£o encontrou pelo texto exato, tenta pela classe ou posi√ß√£o
      if (!salvarClicado) {
        console.log('Tentando abordagens alternativas para o bot√£o Salvar...');
        
        // Na captura de tela, vemos que h√° um bot√£o Salvar do lado direito
        // Especificamente na captura, vemos que √© um bot√£o azul na parte inferior da tela
        await page.click('button.Salvar, button[class*="Salvar"], button[class*="salvar"]');
        console.log('‚úÖ Clicou no bot√£o Salvar por classe');
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao localizar bot√£o Salvar por seletor:', e);
      
      // Alternativa: Clica no bot√£o na posi√ß√£o mostrada na captura de tela (canto inferior direito)
      try {
        // Com base na captura, o bot√£o Salvar est√° na posi√ß√£o inferior direita
        const pageSize = await page.evaluate(() => {
          return {
            width: window.innerWidth,
            height: window.innerHeight
          };
        });
        
        // Clica na posi√ß√£o aproximada do bot√£o Salvar
        await page.mouse.click(pageSize.width - 100, pageSize.height - 50);
        console.log('‚úÖ Clicou na posi√ß√£o aproximada do bot√£o Salvar');
      } catch (clickError) {
        console.log('‚ö†Ô∏è Falha ao tentar clicar por posi√ß√£o:', clickError);
      }
    }
    
    // 17. Espera e verifica a mensagem "Modifica√ß√µes salvas"
    try {
      // Aguarda a notifica√ß√£o "Modifica√ß√µes salvas" aparecer
      await page.waitForSelector('text="Modifica√ß√µes salvas"', { timeout: 10000 });

      console.log('‚úÖ CONFIRMADO: Mensagem "Modifica√ß√µes salvas" exibida com sucesso!');
      
      // Verificando se a mensagem est√° vis√≠vel por outro m√©todo, para dupla confirma√ß√£o
      const notificacaoSalvas = await page.locator('text="Modifica√ß√µes salvas"').isVisible();
      if (notificacaoSalvas) {
        console.log('‚úÖ Notifica√ß√£o de sucesso verificada por m√©todo alternativo!');
      }
    } catch (e) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel detectar a mensagem "Modifica√ß√µes salvas":', e);

      const anyNotification = await page.locator('.toast-success, .notification, .alert, .notification--success').isVisible();
      if (anyNotification) {
        console.log('‚úÖ Foi exibida uma notifica√ß√£o, mas n√£o foi poss√≠vel confirmar o texto exato');
      } else {
        console.log('‚ö†Ô∏è Nenhuma notifica√ß√£o vis√≠vel ap√≥s tentativa de salvar');
      }
    }
    
    console.log(`‚úÖ Processo finalizado com sucesso! Agente #${counter} criado com ID: ${agentId}`);
  } catch (error) {
    console.error('‚ùå Erro durante a execu√ß√£o:', error);
  
    // Opcional: pause para debug interativo quando ocorre erro
    console.log('Pausando execu√ß√£o para debug. Pressione Enter para continuar...');
    
    // N√£o use page.pause() pois ele pode causar problemas em caso de erro
    // Em vez disso, usamos um prompt b√°sico do Node.js 
    await new Promise<void>(resolve => {
      process.stdin.once('data', () => {
        resolve();
      });
    });
  } finally {
    // Adicionando try/catch para evitar erros caso o browser j√° esteja fechado
    try {
      await page.waitForTimeout(3000);
      await browser.close();
    } catch (e) {
      console.log('‚ö†Ô∏è Navegador j√° estava fechado ou erro ao fechar');
    }
  }
})();